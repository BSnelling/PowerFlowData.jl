var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = PowerFlowData","category":"page"},{"location":"#PowerFlowData","page":"Home","title":"PowerFlowData","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PowerFlowData.jl provides a parser for PSS/E-format .raw Power Flow Data Files.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To read a .raw file, use parse_network:","category":"page"},{"location":"","page":"Home","title":"Home","text":"parse_network(\"file.raw\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will return a Network object, which contains the data parsed into dedicated structures matching the PSS/E-format specification.","category":"page"},{"location":"#Example","page":"Home","title":"Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Usually your data will be in a file, and you'd read it with parse_network(\"file.raw\"), but here we'll pass in the data directly, to show how it matches to the output:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using PowerFlowData, DataFrames\ndata = IOBuffer(\"\"\"\n    0,   100.00          / PSS/E-29.3    WED, SEP 15 2021  21:04\n    SE SNAPSHOT 15-09-2021 PEAK CASE 18:00\n    FULL COPY OF SYNTHETIC\n         1,'AAA    3    ', 111.0000,4,     0.000,     0.000, 327,   1,0.00000,   0.0000,   1\n    222222,'PRPR C D    ',  42.0000,1,     0.000,     0.000, 694,  24,1.11117,  20.0606,   7\n    0 / END OF BUS DATA, BEGIN LOAD DATA\n    \"\"\"\n);\nnetwork = parse_network(data);\nNamedTuple(network.caseid)  # Case Identification data is a single row.\nDataFrame(network.buses)    # Bus data, and all other data, is a table.","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"parse_network","category":"page"},{"location":"#PowerFlowData.parse_network","page":"Home","title":"PowerFlowData.parse_network","text":"parse_network(source) -> Network\n\nRead a PSS/E-format .raw Power Flow Data file and return a Network object.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"Network\nCaseID\nBuses\nLoads\nGenerators\nBranches\nTransformers\nAreaInterchanges\nTwoTerminalDCLines","category":"page"},{"location":"#PowerFlowData.Network","page":"Home","title":"PowerFlowData.Network","text":"Network\n\nRepresentation of a power network.\n\nThe PSS/E data format comprises 16 data categories of network and equipment elements, each of which requires a particular type of data.\n\nSimilarly, a Network stores the data from each category in its own dedicated structure.\n\nCurrently supported are:\n\nCaseID\nBuses\nLoads\nGenerators\nBranches\nTransformers\nAreaInterchanges\nTwoTerminalDCLines\n\nCaseID data is a single row (in the Tables.jl-sense). You can access it like network.caseid and interact with it like a NamedTuple, or even convert it to a NamedTuple with NamedTuple(caseid).\n\nAll other records (buses, loads, etc.) can be accessed also via the fields, for example network.buses, and each is returned as lightweight table structure (again, in the Tables.jl-sense). That is, all structures implement the Tables.jl interface, so can be passed to any valid sink, such as a DataFrame like DataFrame(network.buses).\n\nFor more info on working with tables see Tables.jl, and for common table operations see TableOperations.jl.\n\nFields\n\ncaseid::CaseID\nCase identification data.\nbuses::Buses\nBus records.\nloads::Loads\nLoad records.\ngenerators::Generators\nGenerator records.\nbranches::Branches\nNon-transformer Branch records.\ntransformers::Transformers\nTransformer records.\ninterchanges::AreaInterchanges\nArea Interchange records.\ntwo_terminal_dc::TwoTerminalDCLines\nTwo-terminal DC Line records.\n\n\n\n\n\n","category":"type"},{"location":"#PowerFlowData.CaseID","page":"Home","title":"PowerFlowData.CaseID","text":"struct CaseID <: Tables.AbstractRow\n\nFields\n\nic::Int64\nIC Change code: 0 - base case (i.e., clear the working case before adding data to it). 1 - add data to the working case.\n\nsbase::Float64\nSystem base MVA.\n\n\n\n\n\n","category":"type"},{"location":"#PowerFlowData.Buses","page":"Home","title":"PowerFlowData.Buses","text":"struct Buses <: PowerFlowData.Records\n\nEach network bus to be represented in PSS/E is introduced through a bus data record. Each bus data record includes not only data for the basic bus properties but also includes information on an optionally connected shunt admittance to ground. That admittance can represent a shunt capacitor or a shunt reactor (both with or without a real component) or a shunt resistor. It must not represent line connected admittance, loads, line charging or transformer magnetizing impedance, all of which are entered in other data categories.\n\nFields\n\ni::Vector{Int64}\nBus number (1 to 999997).\nname::Vector{InlineStrings.String15}\nAlphanumeric identifier assigned to bus \"I\". The name may be up to twelve characters and must be enclosed in single quotes. NAME may contain any combination of blanks, uppercase letters, numbers and special characters, but the first character must not be a minus sign.\n\nbasekv::Vector{Float64}\nBus base voltage; entered in kV.\nide::Vector{Int64}\nBus type code: 1 - load bus or other bus without any generator boundary condition. 2 - generator or plant bus either regulating voltage or with a fixed reactive power (Mvar). A generator that reaches its reactive power limit will no longer control voltage but rather hold reactive power at its limit. 3 - swing bus or slack bus. It has no power or reactive limits and regulates voltage at a fixed reference angle. 4 - disconnected or isolated bus.\n\ngl::Vector{Float64}\nActive component of shunt admittance to ground; entered in MW at one per unit voltage. GL should not include any resistive admittance load, which is entered as part of load data.\n\nbl::Vector{Float64}\nReactive component of shunt admittance to ground; entered in Mvar at one per unit voltage. BL should not include any reactive impedance load, which is entered as part of load data; line charging and line connected shunts, which are entered as part of non-transformer branch data; or transformer magnetizing admittance, which is entered as part of transformer data. BL is positive for a capacitor, and negative for a reactor or an inductive load.\n\narea::Vector{Int64}\nArea number. 1 through the maximum number of areas at the current size level.\nzone::Vector{Int64}\nZone number. 1 through the maximum number of zones at the current size level.\nvm::Vector{Float64}\nBus voltage magnitude; entered in pu.\nva::Vector{Float64}\nBus voltage phase angle; entered in degrees.\nowner::Vector{Int64}\nOwner number. 1 through the maximum number of owners at the current size level.\n\n\n\n\n\n","category":"type"},{"location":"#PowerFlowData.Loads","page":"Home","title":"PowerFlowData.Loads","text":"struct Loads <: PowerFlowData.Records\n\nEach network bus at which a load is to be represented must be specified in at least one load data record. If multiple loads are to be represented at a bus, they must be individually identified in a load data record for the bus with a different load identifier. Each load at a bus can be a mixture of loads with different characteristics.\n\nFields\n\ni::Vector{Int64}\nBuses number, or extended buses name enclosed in single quotes.\nid::Vector{InlineStrings.String3}\nOne- or two-character uppercase non blank alphanumeric load identifier used to distinguish among multiple loads at bus \"I\". It is recommended that, at buses for which a single load is present, the load be designated as having the load identifier '1'.\n\nstatus::Vector{Bool}\nInitial load status of one for in-service and zero for out-of-service.\narea::Vector{Int64}\nArea to which the load is assigned (1 through the maximum number of areas at the current size level).\nzone::Vector{Float64}\nZone to which the load is assigned (1 through the maximum number of zones at the current size level).\npl::Vector{Float64}\nActive power component of constant MVA load; entered in MW.\nql::Vector{Float64}\nReactive power component of constant MVA load; entered in Mvar.\nip::Vector{Float64}\nActive power component of constant current load; entered in MW at one per unit voltage.\niq::Vector{Float64}\nReactive power component of constant current load; entered in Mvar at one per unit voltage.\nyp::Vector{Float64}\nActive power component of constant admittance load; entered in MW at one per unit voltage.\nyq::Vector{Float64}\nReactive power component of constant admittance load; entered in Mvar at one per unit voltage. YQ is a negative quantity for an inductive load and positive for a capacitive load.\n\nowner::Vector{Int64}\nOwner to which the load is assigned (1 through the maximum number of owners at the current size level).\n\n\n\n\n\n","category":"type"},{"location":"#PowerFlowData.Generators","page":"Home","title":"PowerFlowData.Generators","text":"struct Generators <: PowerFlowData.Records\n\nEach network bus to be represented as a generator or plant bus in PSS/E must be specified in a generator data record. In particular, each bus specified in the bus data input with a type code of two (2) or three (3) must have a generator data record entered for it.\n\nFields\n\ni::Vector{Int64}\nBus number, or extended bus name enclosed in single quotes.\nid::Vector{InlineStrings.String3}\nOne- or two-character uppercase non blank alphanumeric machine identifier used to distinguish among multiple machines at bus \"I\". It is recommended that, at buses for which a single machine is present, the machine be designated as having the machine identifier ’1’. ID = ’1’ by default.\n\npg::Vector{Float64}\nGenerator active power output; entered in MW. PG = 0.0 by default.\nqg::Vector{Float64}\nGenerator reactive power output; entered in Mvar. QG needs to be entered only if the case, as read in, is to be treated as a solved case. QG = 0.0 by default.\n\nqt::Vector{Float64}\nMaximum generator reactive power output; entered in Mvar. For fixed output gen- erators (i.e., nonregulating), QT must be equal to the fixed Mvar output. QT = 9999.0 by default.\n\nqb::Vector{Float64}\nMinimum generator reactive power output; entered in Mvar. For fixed output generators, QB must be equal to the fixed Mvar output. QB = -9999.0 by default.\n\nvs::Vector{Float64}\nRegulated voltage setpoint; entered in pu. VS = 1.0 by default.\nireg::Vector{Int64}\nBus number, or extended bus name enclosed in single quotes, of a remote type 1 or 2 bus whose voltage is to be regulated by this plant to the value specified by VS. If bus IREG is other than a type 1 or 2 bus, bus \"I\" regulates its own voltage to the value specified by VS. IREG is entered as zero if the plant is to regulate its own voltage and must be zero for a type three (swing) bus. IREG = 0 by default.\n\nmbase::Vector{Float64}\nTotal MVA base of the units represented by this machine; entered in MVA. This quantity is not needed in normal power flow and equivalent construction work, but is required for switching studies, fault analysis, and dynamic simulation. MBASE = system base MVA by default.\n\nzr::Vector{Float64}\nComplex machine impedance, ZSORCE; entered in pu on MBASE base. This data is not needed in normal power flow and equivalent construction work, but is required for switching studies, fault analysis, and dynamic simulation. For dynamic simulation, this impedance must be set equal to the unsaturated subtransient impedance for those generators to be modeled by subtransient level machine models, and to unsaturated transient impedance for those to be modeled by classical or transient level models. For short-circuit studies, the saturated subtransient or transient impedance should be used. ZR = 0.0 by default.\n\nzx::Vector{Float64}\nSee zr. ZX = 1.0 by default.\nrt::Vector{Float64}\nStep-up transformer impedance, XTRAN; entered in pu on MBASE base. XTRAN should be entered as zero if the step-up transformer is explicitly modeled as a network branch and bus \"I\" is the terminal bus. RT+jXT = 0.0 by default.\n\nxt::Vector{Float64}\nSee rt. RT+jXT = 0.0 by default.\ngtap::Vector{Float64}\nStep-up transformer off-nominal turns ratio; entered in pu. GTAP is used only if XTRAN is nonzero. GTAP = 1.0 by default.\n\nstat::Vector{Bool}\nInitial machine status of one for in-service and zero for out-of-service. STAT = 1 by default.\n\nrmpct::Vector{Float64}\nPercent of the total Mvar required to hold the voltage at the bus controlled by this bus \"I\" that are to be contributed by the generation at bus \"I\"; RMPCT must be positive. RMPCT is needed if IREG specifies a valid remote bus and there is more than one local or remote voltage controlling device (plant, switched shunt, FACTS device shunt element, or VSC DC line converter) controlling the voltage at bus IREG to a setpoint. RMPCT is needed also if bus \"I\" itself is being controlled locally or remotely by one or more other setpoint mode voltage controlling devices. RMPCT = 100.0 by default.\n\npt::Vector{Float64}\nMaximum generator active power output; entered in MW. PT = 9999.0 by default.\npb::Vector{Float64}\nMinimum generator active power output; entered in MW. PB = -9999.0 by default.\noi::Vector{Int64}\nOwner number; (1 through the maximum number of owners at the current size level). Each machine may have up to four owners. By default, O1 is the owner to which bus \"I\" is assigned and O2, O3, and O4 are zero.\n\nfi::Vector{Float64}\nFraction of total ownership assigned to owner Oi; each Fi must be positive. The Fi values are normalized such that they sum to 1.0 before they are placed in the working case. By default, each Fi is 1.0.\n\n\n\n\n\n","category":"type"},{"location":"#PowerFlowData.Branches","page":"Home","title":"PowerFlowData.Branches","text":"struct Branches <: PowerFlowData.Records\n\nIn PSS/E, the basic transmission line model is an Equivalent Pi connected between network buses.\n\nData for shunt equipment units, such as reactors, which are connected to and switched with the line, are entered in the same data record.\n\nnote: Shunts connected to buses\nTo represent shunts connected to buses, that shunt data should be entered in the bus data record.\n\nnote: Transformers\nBranches to be modeled as transformers are not specified in this data category; rather, they are specified in the Transformers data category.\n\nFields\n\ni::Vector{Int64}\nBranch \"from bus\" number, or extended bus name enclosed in single quotes.\nj::Vector{Int64}\nBranch \"to bus\" number, or extended bus name enclosed in single quotes. \"J\" is entered as a negative number, or with a minus sign before the first character of the extended bus name, to designate it as the metered end; otherwise, bus \"I\" is assumed to be the metered end.\n\nckt::Vector{InlineStrings.String3}\nOne- or two-character uppercase nonblank alphanumeric branch circuit identifier; the first character of CKT must not be an ampersand \"&\". It is recommended that single circuit branches be designated as having the circuit identifier '1'. CKT = '1' by default.\n\nr::Vector{Float64}\nBranch resistance; entered in pu. A value of R must be entered for each branch.\nx::Vector{Float64}\nBranch reactance; entered in pu. A nonzero value of X must be entered for each branch.\nb::Vector{Float64}\nTotal branch charging susceptance; entered in pu. B = 0.0 by default.\nrate_a::Vector{Float64}\nFirst loading rating; entered in MVA. If RATEA is set to 0.0, the default value, this branch will not be included in any examination of circuit loading.\nRatings are entered as: MVA_rated = sqrt(3)  E_base  I_rated  10^-6 where:\nE_base is the base line-to-line voltage in volts of the buses to which the terminal of the branch is connected.\nI_rated is the branch rated phase current in amperes.\n\nrate_b::Vector{Float64}\nSecond loading rating; entered in MVA. RATEB = 0.0 by default.\nrate_c::Vector{Float64}\nThird loading rating; entered in MVA. RATEC = 0.0 by default.\ngi::Vector{Float64}\nComplex admittance of the line shunt at the bus \"I\" end of the branch; entered in pu. BI is negative for a line connected reactor and positive for line connected capacitor. GI + jBI = 0.0 by default.\n\nbi::Vector{Float64}\nComplex admittance of the line shunt at the bus \"I\" end of the branch; entered in pu. BI is negative for a line connected reactor and positive for line connected capacitor. GI + jBI = 0.0 by default.\n\ngj::Vector{Float64}\nComplex admittance of the line shunt at the bus \"J\" end of the branch; entered in pu. BJ is negative for a line connected reactor and positive for line connected capacitor. GJ + jBJ = 0.0 by default.\n\nbj::Vector{Float64}\nComplex admittance of the line shunt at the bus \"J\" end of the branch; entered in pu. BJ is negative for a line connected reactor and positive for line connected capacitor. GJ + jBJ = 0.0 by default.\n\nst::Vector{Bool}\nInitial branch status where 1 designates in-service and 0 designates out-of-service. ST = 1 by default.\n\nlen::Vector{Float64}\nLine length; entered in user-selected units. LEN = 0.0 by default.\noi::Vector{Int64}\nOwner number; 1 through the maximum number of owners at the current size level. Each branch may have up to four owners. By default, O1 is the owner to which bus \"I\" is assigned and O2, O3, and O4 are zero.\n\nfi::Vector{Float64}\nFraction of total ownership assigned to owner Oi; each Fi must be positive. The Fi values are normalized such that they sum to 1.0 before they are placed in the working case. By default, each Fi is 1.0.\n\n\n\n\n\n","category":"type"},{"location":"#PowerFlowData.Transformers","page":"Home","title":"PowerFlowData.Transformers","text":"struct Transformers <: PowerFlowData.Records\n\nEach AC transformer to be represented in PSS/E is introduced through transformer data records that specify all the data required to model transformers in power flow calculations, with one exception.\n\nThat exception is a set of ancillary data, comprising transformer impedance correction tables, which define the manner in which transformer impedance changes as off-nominal turns ratio or phase shift angle is adjusted. Those data records are described in Transformer Impedance Correction Tables.\n\nBoth two-winding and three-winding transformers are specified in the transformer data records. The data records for the two-winding transformer are common to the three-winding transformer; the data block for two-winding transformers is a subset of the data required for three-winding transformers.\n\nFields\n\ni::Vector{Int64}\nThe bus number, or extended bus name enclosed in single quotes, of the bus to which the first winding is connected. The transformer’s magnetizing admittance is modeled on winding one. The first winding is the only winding of a two-winding transformer whose tap ratio or phase shift angle may be adjusted by the power flow solution activities; any winding(s) of a three-winding transformer may be adjusted. No default is allowed.\n\nj::Vector{Int64}\nThe bus number, or extended bus name enclosed in single quotes, of the bus to which the second winding is connected. This winding may have a fixed, off-nominal tap ratio assigned to it. No default is allowed.\n\nk::Vector{Int64}\nThe bus number, or extended bus name enclosed in single quotes, of the bus to which the third winding is connected. Zero is used to indicate that no third winding is present. Always equal to zero for a two-winding transformer.\n\nckt::Vector{InlineStrings.String3}\nOne- or two-character uppercase nonblank alphanumeric transformer circuit identifier; the first character of ckt must not be an ampersand ('&').\n\ncw::Vector{Int64}\nThe winding data I/O code which defines the units in which the turns ratios windv1 and windv2 are specified (the units of rma1 and rmi1 are also governed by cw when |cod1| is 1 or 2):\n1 for off-nominal turns ratio in pu of winding bus base voltage;\n2 for winding voltage in kV.\ncw = 1 by default.\n\ncz::Vector{Int64}\nThe impedance data I/O code that defines the units in which the winding impedances r1_2 and x1_2 are specified:\n1 for resistance and reactance in pu on system base quantities;\n2 for resistance and reactance in pu on a specified base MVA and winding bus base voltage;\n3 for transformer load loss in watts and impedance magnitude in pu on a specified base MVA and winding bus base voltage.\ncz = 1 by default.\n\ncm::Vector{Int64}\nThe magnetizing admittance I/O code that defines the units in which mag1 and mag2 are specified:\n1 for complex admittance in pu on system base quantities;\n2 for no load loss in watts and exciting current in pu on winding one to two base MVA and nominal voltage.\ncm = 1 by default.\n\nmag1::Vector{Float64}\nWhen cm is 1, mag1 is the magnetizing conductance in pu on system base quantities; when cm is 2, mag1 is the no load loss in watts. mag1 = 0.0 by default.\n\nmag2::Vector{Float64}\nWhen cm is 1, mag2 is the magnetizing susceptance in pu on system base quantities; when cm is 2, mag2 is the exciting current in pu on winding one to two base MVA (sbase1_2) and nominal voltage (nomv1). mag2 = 0.0 by default.\n\nnmetr::Vector{Int64}\nThe nonmetered end code of either:\n1 (for the winding one bus), or\n2 (for the winding two bus).\nnmetr = 2 by default.\n\nname::Vector{InlineStrings.String15}\nAn alphanumeric identifier assigned to the transformer. The name may be up to twelve characters. name may contain any combination of blanks, uppercase letters, numbers and special characters. name is twelve blanks by default.\n\nstat::Vector{Bool}\nThe initial transformer status, where 1 designates in-service and 0 designates out-of-service. stat = 1 by default.\n\noi::Vector{Int64}\nAn owner number; (1 through the maximum number of owners at the current size level). Each transformer may have up to four owners. By default, O1 is the owner to which bus \"I\" is assigned\n\nfi::Vector{Float64}\nThe fraction of total ownership assigned to owner Oi; each Fi must be positive. The Fi values are normalized such that they sum to 1.0 before they are placed in the working case. By default, each fi is 1.0.\n\nr1_2::Vector{Float64}\nThe measured impedance of the transformer between the buses to which its first and second windings are connected (see also x1_2).\nWhen cz is 1, r1_2 is the resistance in pu on system base quantities;\nwhen cz is 2, r1_2 is the resistance in pu on winding one to two base MVA (sbase1_2) and winding one bus base voltage;\nwhen cz is 3, r1_2 is the load loss in watts.\nr1_2 = 0.0  by default.\n\nx1_2::Vector{Float64}\nThe measured impedance of the transformer between the buses to which its first and second windings are connected (see also r1_2).\nWhen cz is 1, x1_2 is the reactance in pu on system base quantities;\nwhen cz is 2, x1_2 is the reactance in pu on winding one to two base MVA (sbase1_2) and winding one bus base voltage;\nwhen cz is 3, x1_2 is the impedance magnitude in pu on winding one to two base MVA (sbase1_2) and winding one bus base voltage.\nx1_2 has no default.\n\nsbase1_2::Vector{Float64}\nThe winding one to two base MVA of the transformer. sbase1_2 = sbase (the system base MVA) by default.\n\nr2_3::Vector{Union{Missing, Float64}}\nThe measured impedance of a three-winding transformer between the buses to which its second and third windings are connected (see also x2_3).\nWhen cz is 1, r2_3 is the resistance in pu on system base quantities;\nwhen cz is 2, r2_3 is the resistance in pu on winding two to three base MVA (sbase2_3) and winding two bus base voltage;\nwhen cz is 3, r2_3 is the load loss in watts\nr2_3 = 0.0 by default. Ignored for a two-winding transformer.\n\nx2_3::Vector{Union{Missing, Float64}}\nThe measured impedance of a three-winding transformer between the buses to which its second and third windings are connected (see also x2_3).\nWhen cz is 1, x2_3 is the reactance in pu on system base quantities;\nwhen cz is 2, x2_3 is the reactance in pu on winding one to two base MVA (sbas2_3) and winding one bus base voltage;\nwhen cz is 3, x2_3 is the impedance magnitude in pu on winding two to three base MVA (sbase2_3) and winding two bus base voltage.\nx2_3 has no default. Ignored for a two-winding transformer.\n\nsbase2_3::Vector{Union{Missing, Float64}}\nThe winding two to three base MVA of a three-winding transformer; ignored for a two-winding transformer. sbase2_3 = sbase (the system base MVA) by default. Ignored for a two-winding transformer.\n\nr3_1::Vector{Union{Missing, Float64}}\nThe measured impedance of a three-winding transformer between the buses to which its third and first windings are connected (see also x3_1).\nWhen cz is 1, r3_1 is the resistance in pu on system base quantities;\nwhen cz is 2, r3_1 is the resistance in pu on winding three to one base MVA (sbase3_1) and winding three bus base voltage;\nwhen cz is 3, r3_1 is the load loss in watts\nr3_1 = 0.0 by default. Ignored for a two-winding transformer.\n\nx3_1::Vector{Union{Missing, Float64}}\nThe measured impedance of a three-winding transformer between the buses to which its third and first windings are connected (see also x3_1).\nWhen cz is 1, x3_1 is the reactance in pu on system base quantities;\nwhen cz is 2, x3_1 is the reactance in pu on winding three to one base MVA (sbas3_1) and winding three bus base voltage;\nwhen cz is 3, x3_1 is the impedance magnitude in pu on winding three to one base MVA (sbase3_1) and winding three bus base voltage.\nx3_1 has no default. Ignored for a two-winding transformer.\n\nsbase3_1::Vector{Union{Missing, Float64}}\nThe winding three to one base MVA of a three-winding transformer. sbase3_1 = sbase (the system base MVA) by default. Ignored for a two-winding transformer.\n\nvmstar::Vector{Union{Missing, Float64}}\nThe voltage magnitude at the hidden star point bus; entered in pu. vmstar = 1.0 by default. Ignored for a two-winding transformer.\n\nanstar::Vector{Union{Missing, Float64}}\nThe bus voltage phase angle at the hidden star point bus; entered in degrees. anstar = 0.0 by default. Ignored for a two-winding transformer.\n\nwindv1::Vector{Float64}\nWhen cw is 1, windv1 is the winding one off-nominal turns ratio in pu of winding one bus base voltage, and windv1 = 1.0 by default. When cw is 2, windv1 is the actual winding one voltage in kV, and windv1 is equal to the base voltage of bus \"I\" by default.\n\nnomv1::Vector{Float64}\nThe nominal (rated) winding one voltage in kV, or zero to indicate that nominal winding one voltage is to be taken as the base voltage of bus \"I\". nomv1 is used only in converting magnetizing data between per unit admittance values and physical units when cm is 2. nomv1 = 0.0 by default.\n\nang1::Vector{Float64}\nThe winding one phase shift angle in degrees. ang1 is positive for a positive phase shift from the winding one side to the winding two side (for a two-winding transformer). ang1 must be greater than -180.0 and less than or equal to +180.0. ang1 = 0.0 by default.\n\nrata1::Vector{Float64}\nThe first winding’s first rating entered in MVA (not current expressed in MVA).\n\nratb1::Vector{Float64}\nThe first winding’s second rating entered in MVA (not current expressed in MVA).\n\nratc1::Vector{Float64}\nThe first winding’s third rating entered in MVA (not current expressed in MVA).\n\ncod1::Vector{Int64}\nThe transformer control mode for automatic adjustments of the winding one tap or phase shift angle during power flow solutions:\n0 for no control (fixed tap and phase shift);\n±1 for voltage control;\n±2 for reactive power flow control;\n±3 for active power flow control;\n±4 for control of a DC line quantity.\nIf the control mode is entered as a positive number, automatic adjustment of this transformer winding is enabled when the corresponding adjustment is activated during power flow solutions; a negative control mode suppresses the automatic adjustment of this transformer winding. cod1 = 0 by default.\n\ncont1::Vector{Int64}\nThe bus number, or extended bus name enclosed in single quotes, of the bus whose voltage is to be controlled by the transformer turns ratio adjustment option of the power flow solution activities when cod1 is 1.\ncont1 should be non-zero only for voltage controlling transformer windings. cont1 may specify a bus other than \"I\", \"J\", or \"K\"; in this case, the sign of cont1 defines the location of the controlled bus relative to the transformer winding.\nIf cont1 is entered as a positive number, the ratio is adjusted as if bus cont1 is on the winding two side of the transformer; if cont1 is entered as a negative number, the ratio is adjusted as if bus |cont1| is on the winding one side of the transformer. cont1 = 0 by default.\n\nrma1::Vector{Float64}\nrma1 is the upper limit (and rmi1 the lower limit) of either:\nOff-nominal turns ratio in pu of winding one bus base voltage when |cod1| is 1 or 2 and cw is 1; rma1 = 1.1 and rmi1 = 0.9 by default.\nActual winding one voltage in kV when |cod1| is 1 or 2 and cw is 2. No default is allowed.\nPhase shift angl e in degrees when |cod1| is 3. No default is allowed.\nNot used when |cod1| is 0 or 4;\nrma1 = 1.1 and rmi1 = 0.9 by default.\n\nrmi1::Vector{Float64}\nThe lower limit to rma1's upper limit. See rma1 for details.\nvma1::Vector{Float64}\nvma1 is the upper limit (and vmi1 the lower limit) of either:\nVoltage at the controlled bus (bus |cont1|) in pu when |cod1| is 1. vma1 = 1.1 and vmi1 = 0.9 by default.\nReactive power flow into the transformer at the winding one bus end in Mvar when |cod1| is 2. no default is allowed.\nActive power flow into the transformer at the winding one bus end in MW when |cod1| is 3. no default is allowed.\nNot used when |cod1| is 0 or 4; vma1 = 1.1 and vmi1 = 0.9 by default.\n\nvmi1::Vector{Float64}\nThe lower limit to vma1's upper limit. See vma1 for details.\nntp1::Vector{Int64}\nThe number of tap positions available; used when cod1 is 1 or 2. ntp1 must be between 2 and 9999. ntp1 = 33 by default.\n\ntab1::Vector{Int64}\nThe number of a transformer impedance correction table if this transformer winding’s impedance is to be a function of either off-nominal turns ratio or phase shift angle, or 0 if no transformer impedance correction is to be applied to this transformer winding. tab1 = 0 by default.\n\ncr1::Vector{Float64}\nThe load drop compensation impedance for voltage controlling transformers entered in pu on system base quantities; used when cod1 is 1. cr1 + jcx1 = 0.0 by default.\n\ncx1::Vector{Float64}\nSee cr1 for details.\nwindv2::Vector{Float64}\nWhen cw is 1, windv2 is the winding two off-nominal turns ratio in pu of winding two bus base voltage, and windv2 = 1.0 by default. When cw is 2, windv2 is the actual winding two voltage in kV, and windv2 is equal to the base voltage of bus j by default.\n\nnomv2::Vector{Float64}\nThe nominal (rated) winding two voltage in kV, or zero to indicate that nominal winding two voltage is to be taken as the base voltage of bus j. nomv2 is present for information purposes only; it is not used in any of the calculations for modeling the transformer. nomv2 = 0.0 by default.\n\nang2::Vector{Union{Missing, Float64}}\nThe winding two phase shift angle in degrees. ang2 is positive for a positive phase shift from the winding two side to the \"T\" (or star) point bus. ang2 must be greater than -180.0 and less than or equal to +180.0. ang2 = 0.0 by default. Ignored for a two-winding transformer.\n\nrata2::Vector{Union{Missing, Float64}}\nThe second winding’s first rating entered in MVA (not current expressed in MVA). Ignored for a two-winding transformer.\n\nratb2::Vector{Union{Missing, Float64}}\nThe second winding’s second rating entered in MVA (not current expressed in MVA). Ignored for a two-winding transformer.\n\nratc2::Vector{Union{Missing, Float64}}\nThe second winding’s third rating entered in MVA (not current expressed in MVA). Ignored for a two-winding transformer.\n\ncod2::Vector{Union{Missing, Int64}}\nThe transformer control mode for automatic adjustments of the winding two tap or phase shift angle during power flow solutions:\n0 for no control (fixed tap and phase shift);\n±1 for voltage control;\n±2 for reactive power flow control;\n±3 for active power flow control.\nIf the control mode is entered as a positive number, automatic adjustment of this transformer winding is enabled when the corresponding adjustment is activated during power flow solutions; a negative control mode suppresses the automatic adjustment of this transformer winding. cod2 = 0 by default. Ignored for a two-winding transformer.\n\ncont2::Vector{Union{Missing, Int64}}\nThe bus number, or extended bus name enclosed in single quotes, of the bus whose voltage is to be controlled by the transformer turns ratio adjustment option of the power flow solution activities when cod2 is 1. cont2 should be nonzero only for voltage controlling transformer windings.\ncont2 may specify a bus other than i, j, or k; in this case, the sign of cont2 defines the location of the controlled bus relative to the transformer winding. If cont2 is entered as a positive number, or a quoted extended bus name, the ratio is adjusted as if bus cont2 is on the winding one or winding three side of the transformer; if cont2 is entered as a negative number, or a quoted extended bus name with a minus sign preceding the first character, the ratio is adjusted as if bus |cont2| is on the winding two side of the transformer. cont2 = 0 by default. Ignored for a two-winding transformer.\n\nrma2::Vector{Union{Missing, Float64}}\nrma2 is the upper limit (and rmi2 the lower limit) of either:\nOff-nominal turns ratio in pu of winding two bus base voltage when |cod2| is 1 or 2 and cw is 1;   rma2 = 1.1 and rmi2 = 0.9 by default.\nActual winding one voltage in kV when |cod2| is 1 or 2 and cw is 2. No default is allowed.\nPhase shift angle in degrees when |cod2| is 3. No default is allowed.\nNot used when |cod2| is 0;\nrma2 = 1.1 and rmi2 = 0.9 by default. Ignored for a two-winding transformer.\n\nrmi2::Vector{Union{Missing, Float64}}\nThe lower limit to rma2's upper limit. See rma2 for details. Ignored for a two-winding transformer.\n\nvma2::Vector{Union{Missing, Float64}}\nvma2 is the upper limit (and vmi2 the lower limit) of either:\nVoltage at the controlled bus (bus |cont2|) in pu when |cod2| is 1.   vma2 = 1.1 and vmi2 = 0.9 by default.\nReactive power flow into the transformer at the winding two bus end in Mvar when |cod2| is 2.   No default is allowed.\nActive power flow into the transformer at the winding two bus end in MW when |cod2| is 3.   No default is allowed.\nNot used when |cod2| is 0; vma2 = 1.1 and vmi2 = 0.9 by default.\nIgnored for a two-winding transformer.\n\nvmi2::Vector{Union{Missing, Float64}}\nThe lower limit to vma1's upper limit. See vma1 for details. Ignored for a two-winding transformer.\n\nntp2::Vector{Union{Missing, Int64}}\nThe number of tap positions available; used when cod2 is 1 or 2. ntp2 must be between 2 and 9999. ntp2 = 33 by default. Ignored for a two-winding transformer.\n\ntab2::Vector{Union{Missing, Int64}}\nThe number of a transformer impedance correction table if this transformer winding’s impedance is to be a function of either off-nominal turns ratio or phase shift angle, or 0 if no transformer impedance correction is to be applied to this transformer winding. tab2 = 0 by default. Ignored for a two-winding transformer.\n\ncr2::Vector{Union{Missing, Float64}}\nThe load drop compensation impedance for voltage controlling transformers entered in pu on system base quantities; used when cod2 is 1. cr2 + jcx2 = 0.0 by default. Ignored for a two-winding transformer.\n\ncx2::Vector{Union{Missing, Float64}}\nSee cr2 for details. Ignored for a two-winding transformer.\n\nwindv3::Vector{Union{Missing, Float64}}\nWhen cw is 1, windv3 is the winding three off-nominal turns ratio in pu of winding three bus base voltage, and windv3 = 1.0 by default. When cw is 2, windv3 is the actual winding three voltage in kV, and windv3 is equal to the base voltage of bus k by default. Ignored for a two-winding transformer.\n\nnomv3::Vector{Union{Missing, Float64}}\nThe nominal (rated) winding three voltage in kV, or zero to indicate that nominal winding two voltage is to be taken as the base voltage of bus j. nomv3 is present for information purposes only; it is not used in any of the calculations for modeling the transformer. nomv3 = 0.0 by default. Ignored for a two-winding transformer.\n\nang3::Vector{Union{Missing, Float64}}\nThe winding three phase shift angle in degrees. ang3 is positive for a positive phase shift from the winding two side to the \"T\" (or star) point bus. ang3 must be greater than -180.0 and less than or equal to +180.0. ang3 = 0.0 by default. Ignored for a two-winding transformer.\n\nrata3::Vector{Union{Missing, Float64}}\nThe third winding’s first rating entered in MVA (not current expressed in MVA). Ignored for a two-winding transformer.\n\nratb3::Vector{Union{Missing, Float64}}\nThe third winding’s second rating entered in MVA (not current expressed in MVA). Ignored for a two-winding transformer.\n\nratc3::Vector{Union{Missing, Float64}}\nThe third winding’s third rating entered in MVA (not current expressed in MVA). Ignored for a two-winding transformer.\n\ncod3::Vector{Union{Missing, Int64}}\nThe transformer control mode for automatic adjustments of the winding three tap or phase shift angle during power flow solutions:\n0 for no control (fixed tap and phase shift);\n±1 for voltage control;\n±2 for reactive power flow control;\n±3 for active power flow control.\nIf the control mode is entered as a positive number, automatic adjustment of this transformer winding is enabled when the corresponding adjustment is activated during power flow solutions; a negative control mode suppresses the automatic adjustment of this transformer winding. cod3 = 0 by default. Ignored for a two-winding transformer.\n\ncont3::Vector{Union{Missing, Int64}}\nThe bus number, or extended bus name enclosed in single quotes, of the bus whose voltage is to be controlled by the transformer turns ratio adjustment option of the power flow solution activities when cod3 is 1. cont3 should be nonzero only for voltage controlling transformer windings.\ncont3 may specify a bus other than i, j, or k; in this case, the sign of cont3 defines the location of the controlled bus relative to the transformer winding. If cont3 is entered as a positive number, or a quoted extended bus name, the ratio is adjusted as if bus cont3 is on the winding one or winding two side of the transformer; if cont3 is entered as a negative number, or a quoted extended bus name with a minus sign preceding the first character, the ratio is adjusted as if bus |cont3| is on the winding three side of the transformer. cont3 = 0 by default. Ignored for a two-winding transformer.\n\nrma3::Vector{Union{Missing, Float64}}\nrma3 is the upper limit (and rmi3 the lower limit) of either:\nOff-nominal turns ratio in pu of winding three bus base voltage when |cod3| is 1 or 2 and cw is 1; rma3 = 1.1 and rmi3 = 0.9 by default.\nActual winding one voltage in kV when |cod3| is 1 or 2 and cw is 2. No default is allowed.\nPhase shift angle in degrees when |cod3| is 3. No default is allowed.\nNot used when |cod3| is 0;\nrma3 = 1.1 and rmi3 = 0.9 by default. Ignored for a two-winding transformer.\n\nrmi3::Vector{Union{Missing, Float64}}\nThe lower limit to rma3's upper limit. See rma3 for details. Ignored for a two-winding transformer.\n\nvma3::Vector{Union{Missing, Float64}}\nvma3 is the upper limit (and vmi3 the lower limit) of either:\nVoltage at the controlled bus (bus |cont3|) in pu when |cod3| is 1. vma3 = 1.1 and vmi3 = 0.9 by default.\nReactive power flow into the transformer at the winding three bus end in Mvar when |cod3| is 2. No default is allowed.\nActive power flow into the transformer at the winding two bus end in MW when |cod3| is 3. No default is allowed.\nNot used when |cod3| is 0; vma3 = 1.1 and vmi3 = 0.9 by default.\nIgnored for a two-winding transformer.\n\nvmi3::Vector{Union{Missing, Float64}}\nThe lower limit to vma3's upper limit. See vma3 for details. Ignored for a two-winding transformer.\n\nntp3::Vector{Union{Missing, Int64}}\nThe number of tap positions available; used when cod3 is 1 or 2. ntp3 must be between 2 and 9999. ntp3 = 33 by default. Ignored for a two-winding transformer.\n\ntab3::Vector{Union{Missing, Int64}}\nThe number of a transformer impedance correction table if this transformer winding’s impedance is to be a function of either off-nominal turns ratio or phase shift angle, or 0 if no transformer impedance correction is to be applied to this transformer winding. tab3 = 0 by default. Ignored for a two-winding transformer.\n\ncr3::Vector{Union{Missing, Float64}}\nThe load drop compensation impedance for voltage controlling transformers entered in pu on system base quantities; used when cod3 is 1. cr3 + jcx3 = 0.0 by default. Ignored for a two-winding transformer.\n\ncx3::Vector{Union{Missing, Float64}}\nSee cr3 for details. Ignored for a two-winding transformer.\n\n\n\n\n\n","category":"type"},{"location":"#PowerFlowData.AreaInterchanges","page":"Home","title":"PowerFlowData.AreaInterchanges","text":"struct AreaInterchanges <: PowerFlowData.Records\n\nArea interchange is a required net export of power from, or net import of power to, a specific area. This does not imply that the power is destined to be transferred to or from any other specific area. To specify transfers between specific pairs of areas see InterAreaTransfers.\n\nFields\n\ni::Vector{Int64}\nArea number (1 through the maximum number of areas at the current size level)\n\nisw::Vector{Int64}\nBus number, or extended bus name enclosed in single quotes, of the area slack bus for area interchange control. The bus must be a generator (type two) bus in the specified area. Any area containing a system swing bus (type three) must have either that swing bus or a bus number of zero specified for its area slack bus number. isw = 0 by default.\n\npdes::Vector{Float64}\nDesired net interchange leaving the area (export); entered in MW. pdes = 0.0 by default.\n\nptol::Vector{Float64}\nInterchange tolerance bandwidth; entered in MW. ptol = 10.0 by default.\n\narname::Vector{InlineStrings.String15}\nAlphanumeric identifier assigned to area I. The name may contain up to twelve characters. arname is set to twelve blanks by default.\n\n\n\n\n\n","category":"type"},{"location":"#PowerFlowData.TwoTerminalDCLines","page":"Home","title":"PowerFlowData.TwoTerminalDCLines","text":"struct TwoTerminalDCLines <: PowerFlowData.Records\n\nThe two-terminal DC transmission line model is used to simulate either a point-to-point system with rectifier and inverter separated by a bipolar or mono-polar transmission system or a Back-to-Back system where the rectifier and inverter are physically located at the same site and separated only by a short bus-bar.\n\nThe data requirements fall into three groups:\n\nControl parameters and set-points\nConverter transformers\nThe DC line characteristics\n\nThe steady-state model comprising this data enables not only power flow analysis but also establishes the initial steady-state for dynamic analysis.\n\nFields\n\ni::Vector{Int64}\nThe DC line number.\n\nmdc::Vector{Int8}\nControl mode:\n0 for blocked,\n1 for power,\n2 for current.\nmdc = 0 by default.\n\nrdc::Vector{Float64}\nThe DC line resistance; entered in ohms. No default.\n\nsetvl::Vector{Float64}\nCurrent (amps) or power (MW) demand. When mdc is 1, a positive value of setvl specifies desired power at the rectifier and a negative value specifies desired inverter power. No default.\n\nvschd::Vector{Float64}\nScheduled compounded DC voltage; entered in kV. No default.\n\nvcmod::Vector{Float64}\nMode switch DC voltage; entered in kV. When the inverter DC voltage falls below this value and the line is in power control mode (i.e. mdc = 1), the line switches to current control mode with a desired current corresponding to the desired power at scheduled DC voltage. vcmod = 0.0 by default.\n\nrcomp::Vector{Float64}\nCompounding resistance; entered in ohms. Gamma and/or TAPI is used to attempt to hold the compounded voltage (vdci + dccur  rcomp) at vschd.\nTo control the inverter end DC voltage VDCI, set rcomp to zero;\nto control the rectifier end DC voltage VDCR, set rcomp to the DC line resistance, rdc;\notherwise, set rcomp to the appropriate fraction of rdc.\nrcomp = 0.0 by default.\n\ndelti::Vector{Float64}\nMargin entered in per unit of desired DC power or current. This is the fraction by which the order is reduced when alpha is at its minimum (alfmn) and the inverter is controlling the line current. delti = 0.0 by default.\n\nmeter::Vector{InlineStrings.String1}\nMetered end code of either \"R\" (for rectifier) or \"I\" (for inverter). meter = \"I\" by default.\n\ndcvmin::Vector{Float64}\nMinimum compounded DC voltage; entered in kV. Only used in constant gamma operation (i.e. when gammx = gammn) when TAPI is held constant and an AC transformer tap is adjusted to control DC voltage (i.e. when ifi, iti, and idi specify a two-winding transformer). dcvmin = 0.0 by default.\n\ncccitmx::Vector{Int64}\nIteration limit for capacitor commutated two-terminal DC line Newton solution procedure. cccitmx = 20 by default.\n\ncccacc::Vector{Float64}\nAcceleration factor for capacitor commutated two-terminal DC line Newton solution procedure. cccacc = 1.0 by default.\n\nipr::Vector{Int64}\nRectifier converter bus number, or extended bus name enclosed in single quotes. No default.\n\nnbr::Vector{Int64}\nNumber of bridges in series (rectifier). No default.\n\nalfmx::Vector{Float64}\nNominal maximum rectifier firing angle; entered in degrees. No default.\n\nalfmn::Vector{Float64}\nMinimum steady-state rectifier firing angle; entered in degrees. No default.\n\nrcr::Vector{Float64}\nRectifier commutating transformer resistance per bridge; entered in ohms. No default allowed.\n\nxcr::Vector{Float64}\nRectifier commutating transformer reactance per bridge; entered in ohms. No default allowed.\n\nebasr::Vector{Float64}\nRectifier primary base AC voltage; entered in kV. No default.\n\ntrr::Vector{Float64}\nRectifier transformer ratio. trr = 1.0 by default.\n\ntapr::Vector{Float64}\nRectifier tap setting. tapr = 1.0 by default.\n\ntmxr::Vector{Float64}\nMaximum rectifier tap setting. tmxr = 1.5 by default.\n\ntmnr::Vector{Float64}\nMinimum rectifier tap setting. tmnr = 0.51 by default.\n\nstpr::Vector{Float64}\nRectifier tap step; must be positive. stpr = 0.00625 by default.\n\nicr::Vector{Int64}\nRectifier firing angle measuring bus number, or extended bus name enclosed in single quotes. The firing angle and angle limits used inside the DC model are adjusted by the difference between the phase angles at this bus and the AC/DC interface (i.e. the converter bus, ipr). icr = 0 by default.\n\nifr::Vector{Int64}\nWinding one side \"from bus\" number, or extended bus name enclosed in single quotes, of a two-winding transformer. ifr = 0 by default.\n\nitr::Vector{Int64}\nWinding two side \"to bus\" number, or extended bus name enclosed in single quotes, of a two-winding transformer. itr = 0 by default.\n\nidr::Vector{InlineStrings.String3}\nCircuit identifier; the branch described by ifr, itr, and idr must have been entered as a two-winding transformer; an AC transformer may control at most only one DC converter. idr = '1' by default.\nIf no branch is specified, tapr is adjusted to keep alpha within limits; otherwise, tapr is held fixed and this transformer’s tap ratio is adjusted. The adjustment logic assumes that the rectifier converter bus is on the winding two side of the transformer. The limits tmxr and tmnr specified here are used; except for the transformer control mode flag (cod of Transformers), the AC tap adjustment data is ignored.\n\nxcapr::Vector{Float64}\nCommutating capacitor reactance magnitude per bridge; entered in ohms. xcapr = 0.0 by default.\n\nipi::Vector{Int64}\nInverter converter bus number, or extended bus name enclosed in single quotes.\n\nnbi::Vector{Int64}\nNumber of bridges in series (inverter).\n\ngammx::Vector{Float64}\nNominal maximum inverter firing angle; entered in degrees.\n\ngammn::Vector{Float64}\nMinimum steady-state inverter firing angle; entered in degrees.\n\nrci::Vector{Float64}\nInverter commutating transformer resistance per bridge; entered in ohms.\n\nxci::Vector{Float64}\nInverter commutating transformer reactance per bridge; entered in ohms.\n\nebasi::Vector{Float64}\nInverter primary base AC voltage; entered in kV.\n\ntri::Vector{Float64}\nInverter transformer ratio.\n\ntapi::Vector{Float64}\nInverter tap setting.\n\ntmxi::Vector{Float64}\nMaximum inverter tap setting.\n\ntmni::Vector{Float64}\nMinimum inverter tap setting.\n\nstpi::Vector{Float64}\nInverter tap step; must be positive.\n\nici::Vector{Int64}\nInverter firing angle measuring bus number, or extended bus name enclosed in single quotes.\n\nifi::Vector{Int64}\nWinding one side \"from bus\" number, or extended bus name enclosed in single quotes, of a two-winding transformer.\n\niti::Vector{Int64}\nWinding two side \"to bus\" number, or extended bus name enclosed in single quotes, of a two-winding transformer.\n\nidi::Vector{InlineStrings.String3}\nCircuit identifier; the branch described by ifr, itr, and idr must have been entered as a two-winding transformer; an AC transformer may control at most only one DC converter.\n\nxcapi::Vector{Float64}\nCommutating capacitor reactance magnitude per bridge; entered in ohms.\n\n\n\n\n\n","category":"type"},{"location":"#Alternatives","page":"Home","title":"Alternatives","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In Julia, I am are aware of two other open-source packages with functionality to parse PSS/E files:","category":"page"},{"location":"","page":"Home","title":"Home","text":"PowerModels.jl\nPowerSystems.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"I have not used either so cannot recommend one over the other. From what I can see, these parsers are almost identical to each other. It seems PowerSystems.jl originally vendored the PowerModels.jl code, but the parsers may have diverged slightly over time.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Importantly, these alternatives take a completely different approach to this package. These other parsers read the .raw files as a String (e.g. using readlines), then operate on string data, and parse strings into other Julia types as necessary.","category":"page"},{"location":"","page":"Home","title":"Home","text":"PowerFlowData.jl (this package) reads the .raw files as a bytes buffer (Vector{UInt8}), then parses the bytes directly into Julia types.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Hopefully this will be much faster and more memory efficient, but benchmarks pending. For now, this package is being developed as a fun exercise. Feel encouraged to give this package a try (and open issues!), but these alternative parsers are surely more battle-tested!","category":"page"},{"location":"#Implementation-details","page":"Home","title":"Implementation details","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We use Parsers.jl to parse bytes into Julia types. Broadly speaking, we use Parsers.Options to configure the parsing based on the .raw format (e.g. , characters are delimiters), and then Parsers.xparse to actually parse the bytes between delimiters into the expected Julia types. The expected Julia type depends on the category of data we are reading at that point in the file (buses, loads, …); if the PSS/E user manual says \"load records\" should come after \"bus records\", and each load record should have 12 columns with the first column containing an integer \"bus number\", then we try to parse the first value in a load record as an Int, and so on.","category":"page"}]
}
